<html>
<head>
    <meta charset='utf-8'>
    <title>Jazz Connections</title>
    <style>


body, h1, h2 {
    color: #444;
    font-family: 'Helvetica Neue', Helvetica, sans-serif;
    font-weight: 300;
}
#graph {
    float: left;
    position: relative;
}
#notes {
    float: left;
    margin-left: 20px;
}
h1, h2 {
    margin: 0;
}
h1 {
    font-size: 1.4em;
    margin-bottom: 0.2em;
}
h2 {
    font-size: 1.1em;
    margin-bottom: 1em;
}
.artwork img {
    border: 1px solid #fff;
    -webkit-box-shadow: 0 3px 5px rgba(0,0,0,.3);
    -moz-box-shadow: rgba(0,0,0,.3) 0 3px 5px;
    border-color: #a2a2a2    9;
}
ul {
    list-style: none;
    padding-left: 0;
}
li {
    padding-top: 0.2em;
}
.node circle, circle.node {
    cursor:       pointer;
    fill:         #ccc;
    stroke:       #fff;
    stroke-width: 3px;
}
.edge line, line.edge {
    cursor:       pointer;
    stroke:       #aaa;
    stroke-width: 2px;
}
.labelNode text, text.labelNode {
    cursor:       pointer;
    fill:        #444;
    font-size:   11px;
    font-weight: normal;
}
ul.connection {
    background-color: #f0f0f0;
    border: 1px solid #ccc;
    border-radius: 8px;
    box-shadow: 0 5px 10px rgba(0,0,0,0.2);
    cursor: pointer;
    font-size: 11px;
    font-weight: normal;
    padding: 10px;
    position: absolute;
}
ul.connection:before,
ul.connection:after {
    border: 10px solid transparent;
    content: '';
    position: absolute;
}
ul.connection:before {
    border-bottom-color: #f0f0f0;
    top: -19px;
    left: 20px;
    z-index: 2;
}
ul.connection:after {
    border-bottom-color: rgba(0, 0, 0, 0.2);
    top: -21px;
    left: 20px;
    z-index: 1;
}
/*
ul.connection li {
    background-color: #eee;
    border-left: 1px #444 solid;
    border-right: 1px #444 solid;
    font-size: 11px;
    font-weight: normal;
    margin: 0 50% 0 -50%;
    padding: 2px 4px;
}
ul.connection li:first-child {
    border-top: 1px #444 solid;
    border-top-left-radius: 4px;
    border-top-right-radius: 4px;
}
ul.connection li:last-child {
    border-bottom: 1px #444 solid;
    border-bottom-left-radius: 4px;
    border-bottom-right-radius: 4px;
}
*/
ul.connection.hidden {
    display: none;
}

    </style>
</head>
<body>
    <div id='container'>
        <div id='graph'></div>
        <div id='notes'></div>
        <h2><%= link_to "Favorites by Truck", "/force05", class: 'button' %></h2>
    </div>
    <script src='http://d3js.org/d3.v3.min.js'></script>
    <script>

// Define the dimensions of the visualization. We're using
// a size that's convenient for displaying the graphic on
// http://jsDataV.is

var width = 586,
    height = 620;

// Visual properties of the graph are next. We need to make
// those that are going to be animated accessible to the
// JavaScript.

var labelFill = '#444';
var adjLabelFill = '#aaa';
var edgeStroke = '#aaa';
var nodeFill = '#ccc';
var nodeRadius = 10;
var selectedNodeRadius = 30;

var linkDistance = Math.min(width,height)/4;

// Find the main graph container.

var graph = d3.select('#graph');

// Create the SVG container for the visualization and
// define its dimensions.

var svg = graph.append('svg')
    .attr('width', width)
    .attr('height', height);

// Select the container for the notes and dimension it.

var notes = d3.select('#notes')
    .style({
        'width': 620-width + 'px',
        'height': height + 'px'
    });

// Utility function to update the position properties
// of an arbtrary edge that's part of a D3 selection.
// The optional parameter is the array of nodes for
// the edges. If present, the source and target properties
// are assumed to be indices in this array rather than
// direct references.

var positionEdge = function(edge, nodes) {
    edge.attr('x1', function(d) {
        return nodes ? nodes[d.source].x : d.source.x;
    }).attr('y1', function(d) {
        return nodes ? nodes[d.source].y : d.source.y;
    }).attr('x2', function(d) {
        return nodes ? nodes[d.target].x : d.target.x;
    }).attr('y2', function(d) {
        return nodes ? nodes[d.target].y : d.target.y;
    });
};

// Utility function to update the position properties
// of an arbitrary node that's part of a D3 selection.

var positionNode = function(node) {
    node.attr('transform', function(d) {
        return 'translate(' + d.x + ',' + d.y + ')';
    });
};

// Utility function to position text associated with
// a label pseudo-node. The optional third parameter
// requests transition to the specified fill color.

var positionLabelText = function(text, pseudonode, fillColor) {

    // What's the width of the text element?

    var textWidth = text.getBBox().width;

    // How far is the pseudo-node from the real one?

    var diffX = pseudonode.x - pseudonode.node.x;
    var diffY = pseudonode.y - pseudonode.node.y;
    var dist = Math.sqrt(diffX * diffX + diffY * diffY);

    // Shift in the x-direction a fraction of the text width

    var shiftX = textWidth * (diffX - dist) / (dist * 2);
    shiftX = Math.max(-textWidth, Math.min(0, shiftX));

    var shiftY = pseudonode.node.selected ? selectedNodeRadius : nodeRadius;
    shiftY = 0.5 * shiftY * diffY/Math.abs(diffY);

    var select = d3.select(text);
    if (fillColor) {
        select = select.transition().style('fill', fillColor);
    }
    select.attr('transform', 'translate(' + shiftX + ',' + shiftY + ')');
};

// Define the data.

// data brought in from external source

data = [{"id":1,"first_name":"D'angelo","color":"red","last_name":"Stiedemann","email":"philip.ruel@bogisichjones.org","yelp_id":"oe0kwhdq416wb4ci","trucks":["Redhold Burgers","Keylex Korean","Temp Burgers","Bigtax American","Rank Seafood"]},{"id":2,"first_name":"Garfield","last_name":"Farrell","email":"dax@moriette.info","yelp_id":"fzgiwbd6j89i0q11","trucks":["Span Burgers","Treeflex Barbeque","Treeflex Barbeque","Treeflex Barbeque","Bigtax American","Trippledex Fusion"]},{"id":3,"first_name":"Bruce","last_name":"Carroll","email":"jodie@sporer.org","yelp_id":"tddu54uhea62a12q","trucks":["Treeflex Mexican","Rank Seafood"]},{"id":4,"first_name":"Schuyler","last_name":"Veum","email":"emelie@dickenscollins.com","yelp_id":"7rtka2lt3teybr63","trucks":["Treeflex Barbeque","Bigtax American","Rank Seafood","Lotstring Vegan"]},{"id":5,"first_name":"Roderick","last_name":"Reilly","email":"mohamed.wilkinson@mohr.net","yelp_id":"ksivprvnzk4dfzk6","trucks":["Span Burgers","Tempsoft Seafood"]},{"id":6,"first_name":"Kenny","last_name":"Fadel","email":"kenya@watsicadickinson.info","yelp_id":"ognp7n2zg4jkbtv9","trucks":["Lotstring Fusion","Keylex Korean","Temp Burgers","Span Burgers","Bigtax American","Hatity Seafood"]},{"id":7,"first_name":"Kathleen","last_name":"Torphy","email":"olin@wolff.com","yelp_id":"428b05wx9fe2m7ti","trucks":["Redhold Burgers","Stronghold Burgers","Tempsoft Mexican"]},{"id":8,"first_name":"Chaim","last_name":"Ankunding","email":"mercedes@flatley.biz","yelp_id":"s1aq2622n7nicy5r","trucks":["Stim Seafood","Redhold Burgers","Keylex Korean","Treeflex Mexican","Zathin Fusion"]},{"id":9,"first_name":"Ines","last_name":"Pagac","email":"miguel.baumbach@langoshschuppe.org","yelp_id":"a2mrg4gv8t20jgcc","trucks":["Lotstring Fusion","Stronghold Burgers","Temp Burgers","Hatity Seafood","Alpha Vegan","Tempsoft Seafood","Tempsoft Seafood"]},{"id":10,"first_name":"Adolfo","last_name":"Swift","email":"kendra.kemmer@flatley.biz","yelp_id":"pn5k6s6v024opxn5","trucks":["Lotstring Fusion","Trippledex Fusion","Zontrax Korean","Alpha Vegan"]},{"id":11,"first_name":"Makenzie","last_name":"McDermott","email":"abraham.goodwin@binsruel.org","yelp_id":"zwkpm6cqdr0f67zo","trucks":["Stronghold Burgers"]},{"id":12,"first_name":"Dena","last_name":"Ward","email":"mallie@corkery.name","yelp_id":"8zjpfepa2m8d8izk","trucks":["Stim Seafood","Redhold Burgers","Stronghold Burgers","Hatity Seafood","Tempsoft Seafood"]},{"id":13,"first_name":"Abagail","last_name":"Jacobi","email":"caandra@fadelstamm.org","yelp_id":"orr59julav8gd4w1","trucks":["Redhold Burgers","Keylex Korean","Treeflex Barbeque","Trippledex Fusion","Zontrax Korean","Lotstring Vegan"]},{"id":14,"first_name":"Odell","last_name":"Wilderman","email":"general_murazik@roberts.biz","yelp_id":"jldrk76y032t75kc","trucks":["Y-find American","Temp Burgers","Treeflex Mexican","Treeflex Mexican","Rank Seafood"]},{"id":15,"first_name":"Sierra","last_name":"Schiller","email":"tyrell.mcdermott@bogisich.name","yelp_id":"9jeiv0htcvdl2171","trucks":["Stim Seafood","Span Burgers","Treeflex Mexican","Rank Seafood"]},{"id":16,"first_name":"Chet","last_name":"Beier","email":"stephany_bauch@rippin.name","yelp_id":"uzpemk0az8awl1hj","trucks":["Y-find American","Hatity Seafood","Hatity Seafood"]},{"id":17,"first_name":"Monty","last_name":"Barrows","email":"rey_dare@hagenes.info","yelp_id":"zvizd0q3k3d2a8js","trucks":["Stim Seafood","Temp Burgers"]},{"id":18,"first_name":"Tracy","last_name":"Boehm","email":"alfreda@cummingsgreen.info","yelp_id":"6t386zq53iotbqtx","trucks":["Y-find American","Lotstring Fusion","Span Burgers","Tempsoft Mexican","Zathin Fusion"]},{"id":19,"first_name":"Karen","last_name":"Considine","email":"angel.macgyver@pfeffer.name","yelp_id":"hw1ker9v0glfee22","trucks":["Temp Burgers","Treeflex Barbeque","Treeflex Barbeque"]},{"id":20,"first_name":"Elmira","last_name":"Mosciski","email":"zita@ondricka.name","yelp_id":"05ipknvagzrhbnnn","trucks":["Keylex Korean","Treeflex Mexican","Tempsoft Mexican"]},{"id":21,"first_name":"Jordyn","last_name":"Schowalter","email":"alexander@strosin.info","yelp_id":"g0kyy0hi02qvd05f","trucks":["Y-find American","Lotstring Fusion","Lotstring Fusion","Tempsoft Seafood"]},{"id":22,"first_name":"Clovis","last_name":"Marks","email":"alexandrine.gleichner@mckenzie.info","yelp_id":"3n07s53s7beaha3s","trucks":["Temp Burgers","Temp Burgers","Temp Burgers"]},{"id":23,"first_name":"Jordon","last_name":"Thiel","email":"justen@luettgen.name","yelp_id":"gjc7w68njav37wc8","trucks":["Stim Seafood","Redhold Burgers","Redhold Burgers","Mat Lam Tam Vegan"]},{"id":24,"first_name":"Omari","last_name":"Lind","email":"breanne.hettinger@kshlerinmcdermott.com","yelp_id":"ipbvqqtljco04e9k","trucks":["Temp Burgers","Temp Burgers","Treeflex Mexican","Trippledex Fusion"]},{"id":25,"first_name":"Mary","last_name":"O'Kon","email":"nora@mraz.net","yelp_id":"6qzc70e017p69dy5","trucks":["Stim Seafood","Trippledex Fusion","Holdlamis Seafood"]},{"id":26,"first_name":"Dalton","last_name":"Kuphal","email":"mireya_hintz@bayer.name","yelp_id":"k46s3n4lsfwykkey","trucks":["Y-find American","Stronghold Burgers","Temp Burgers","Tempsoft Mexican"]},{"id":27,"first_name":"Lucienne","last_name":"Tremblay","email":"marilou_erdman@pacochaankunding.net","yelp_id":"tjb57zr91xq6ql36","trucks":["Stronghold Burgers","Keylex Korean","Span Burgers","Treeflex Mexican","Rank Seafood"]},{"id":28,"first_name":"Sheila","last_name":"Kub","email":"alexa@waters.com","yelp_id":"kcmlhobpd8srma1b","trucks":["Trippledex Fusion","Rank Seafood","Alpha Vegan"]},{"id":29,"first_name":"Maxime","last_name":"Beatty","email":"walton@wiza.info","yelp_id":"js6hhokl99s4wi8h","trucks":["Y-find American","Y-find American","Mat Lam Tam Vegan","Treeflex Mexican"]},{"id":30,"first_name":"Linda","last_name":"Paucek","email":"stephan@oreilly.info","yelp_id":"8x6noat3tfng09jm","trucks":["Stim Seafood","Redhold Burgers","Hatity Seafood","Holdlamis Seafood"]},{"id":31,"first_name":"Ralph","last_name":"Ratke","email":"hermina@rogahn.org","yelp_id":"86bafdpdmaucqewl","trucks":["Lotstring Fusion","Trippledex Fusion","Zontrax Korean","Holdlamis Seafood"]},{"id":32,"first_name":"Skylar","last_name":"Gleason","email":"ralph.olson@cormier.name","yelp_id":"edcmy9c2a73aj2n0","trucks":["Y-find American","Treeflex Barbeque","Trippledex Fusion","Zontrax Korean","Hatity Seafood"]},{"id":33,"first_name":"Hester","last_name":"Jones","email":"martina@howell.net","yelp_id":"rswxr8ap9h63oo3u","trucks":["Bigtax American","Alpha Vegan"]},{"id":34,"first_name":"Georgette","last_name":"Roob","email":"osborne_lakin@stiedemanngleason.biz","yelp_id":"zrsbkqpkg4wle8lk","trucks":["Treeflex Mexican"]},{"id":35,"first_name":"Martin","last_name":"Senger","email":"georgette_turcotte@davisquitzon.biz","yelp_id":"elolzxqriwsmf0ah","trucks":["Mat Lam Tam Vegan","Span Burgers","Treeflex Mexican","Bigtax American","Trippledex Fusion","Lotstring Vegan"]},{"id":36,"first_name":"Della","last_name":"Bosco","email":"kari_greenfelder@mayertschoen.info","yelp_id":"7f27cjvjpa82sy7r","trucks":["Keylex Korean","Treeflex Barbeque","Zontrax Korean","Sonair Barbeque"]},{"id":37,"first_name":"Easter","last_name":"Bartell","email":"mazie.mertz@emardnolan.net","yelp_id":"fjw42ih8rqvs1fkz","trucks":["Redhold Burgers","Y-find American","Keylex Korean","Alpha Vegan"]},{"id":38,"first_name":"Cora","last_name":"Leffler","email":"pat.keeling@ruelkuphal.com","yelp_id":"4v7lihun3kqsm84w","trucks":["Y-find American","Y-find American","Keylex Korean","Keylex Korean","Span Burgers","Zathin Fusion"]},{"id":39,"first_name":"Sherwood","last_name":"Schimmel","email":"roxane@douglas.info","yelp_id":"vi32bhsekxmqr4r5","trucks":["Mat Lam Tam Vegan","Temp Burgers","Span Burgers","Bigtax American","Trippledex Fusion","Alpha Vegan","Tempsoft Seafood"]},{"id":40,"first_name":"Morris","last_name":"O'Connell","email":"susana_purdy@deckowmohr.info","yelp_id":"4ofyxxp4u0uqzzfv","trucks":["Y-find American","Stronghold Burgers","Treeflex Barbeque","Alpha Vegan"]},{"id":41,"first_name":"Peyton","last_name":"Price","email":"mable@quigleywehner.biz","yelp_id":"dios7q1zkj0fxafo","trucks":["Keylex Korean","Lotstring Vegan","Alpha Vegan","Tempsoft Seafood","Zathin Fusion","Zathin Fusion"]},{"id":42,"first_name":"Orin","last_name":"Schulist","email":"danny.halvorson@walshzboncak.net","yelp_id":"4fk2opqdw76tu3ro","trucks":["Trippledex Fusion","Sonair Barbeque","Alpha Vegan","Tempsoft Seafood"]},{"id":43,"first_name":"Garth","last_name":"Williamson","email":"carleton@reichelhoeger.net","yelp_id":"3jd2deomeh3h0ihl","trucks":["Zontrax Korean","Holdlamis Seafood"]},{"id":44,"first_name":"Giovanna","last_name":"Hettinger","email":"lera_funk@skiles.name","yelp_id":"eviwvnnij0ina49e","trucks":["Stim Seafood","Mat Lam Tam Vegan","Stronghold Burgers","Keylex Korean","Trippledex Fusion"]},{"id":45,"first_name":"Makenzie","last_name":"Langworth","email":"graham.purdy@stiedemannerdman.name","yelp_id":"z24ewyr9blw7t58u","trucks":["Treeflex Barbeque","Zontrax Korean","Tampflex Barbeque"]},{"id":46,"first_name":"Felton","last_name":"Collins","email":"kiara@bauchconnelly.org","yelp_id":"3bwabu2elj8jodft","trucks":["Trippledex Fusion"]},{"id":47,"first_name":"Sheridan","last_name":"Lockman","email":"arielle@schuppe.org","yelp_id":"l47nodmkobcbsmwc","trucks":["Mat Lam Tam Vegan","Temp Burgers","Tempsoft Mexican","Zontrax Korean","Zathin Fusion"]},{"id":48,"first_name":"Sallie","last_name":"Runolfsson","email":"selena@rippinsawayn.name","yelp_id":"a20q4sstxhcn4p7g","trucks":["Y-find American"]},{"id":49,"first_name":"Erica","last_name":"Block","email":"willard.kiehn@marvin.org","yelp_id":"ctzf20lnfpxsyry6","trucks":["Y-find American","Stronghold Burgers","Stronghold Burgers","Zontrax Korean","Lotstring Vegan","Holdlamis Seafood"]},{"id":50,"first_name":"Valentina","last_name":"O'Keefe","email":"hank@padbergkuhlman.com","yelp_id":"t4x2y6h76x6vylji","trucks":["Temp Burgers","Treeflex Barbeque","Trippledex Fusion","Hatity Seafood","Tempsoft Seafood"]}];
  
// Find the graph nodes from the data set. Each
// album is a separate node.

var nodes = data.map(function(entry, idx, list) {

    // This iteration returns a new object for
    // each node.

    var node = {};

    // // We retain some of the album's properties.

    // node.title    = entry.title;
    // node.subtitle = entry.artist;
    // node.image    = entry.cover;
    // node.url      = entry.itunes;
    // node.color    = entry.color;
    // node.text     = entry.text;

   // // We retain some of the truck's properties.

    node.name    = entry.first_name + " " + entry.last_name[0] + ".";
    node.subtitle = entry.email;
    node.image    = entry.cover;
    node.url      = entry.twitter_handle;
    node.color    = entry.color;
    node.text     = entry.text;

    // We'll also copy the trucks, again using
    // a more neutral property. At the risk of
    // some confusion, we're going to use the term
    // "link" to refer to an individual connection
    // between nodes, and we'll use the more
    // mathematically correct term "edge" to refer
    // to a line drawn between nodes on the graph.
    // (This may be confusing because D3 refers to
    // the latter as "links."

    node.links = entry.trucks.slice(0);

    // As long as we're iterating through the nodes
    // array, take the opportunity to create an
    // initial position for the nodes. Somewhat
    // arbitrarily, we start the nodes off in a
    // circle in the center of the container.

    var radius = 0.4 * Math.min(height,width);
    var theta = idx*2*Math.PI / list.length;
    node.x = (width/2) + radius*Math.sin(theta);
    node.y = (height/2) + radius*Math.cos(theta);

    // Return the newly created object so it can be
    // added to the nodes array.

    return node;
});

// Identify all the indivual links between nodes on
// the graph. As noted above, we're using the term
// "link" to refer to a single connection. As we'll
// see below, we'll call lines drawn on the graph
// (which may represent a combination of multiple
// links) "edges" in a nod to the more mathematically
// minded.

var links = [];

// Start by iterating through the albums.

data.forEach(function(srcNode, srcIdx, srcList) {

    // For each album, iterate through the trucks.

    srcNode.trucks.forEach(function(srcLink) {

        // For each musican in the "src" album, iterate
        // through the remaining albums in the list.

        for (var tgtIdx = srcIdx + 1;
                 tgtIdx < srcList.length;
                 tgtIdx++) {

            // Use a variable to refer to the "tgt"
            // album for convenience.

            var tgtNode = srcList[tgtIdx];

            // Is there any musician in the "tgt"
            // album that matches the musican we're
            // currently considering from the "src"
            // album?

            if (tgtNode.trucks.some(function(tgtLink){
                return tgtLink === srcLink;
            })) {

                // When we do find a match, add a new
                // link to the links array.

                links.push({
                    source: srcIdx,
                    target: tgtIdx,
                    link: srcLink
                });
            }
        }
    });
});

// Now create the edges for our graph. We do that by
// eliminating duplicates from the links array.

var edges = [];

// Iterate through the links array.

links.forEach(function(link) {

    // Assume for now that the current link is
    // unique.

    var existingEdge = false;

    // Look through the edges we've collected so
    // far to see if the current link is already
    // present.

    for (var idx = 0; idx < edges.length; idx++) {

        // A duplicate link has the same source
        // and target values.

        if ((link.source === edges[idx].source) &&
            (link.target === edges[idx].target)) {

            // When we find an existing link, remember
            // it.
            existingEdge = edges[idx];

            // And stop looking.

            break;
        }
    }

    // If we found an existing edge, all we need
    // to do is add the current link to it.

    if (existingEdge) {

        existingEdge.links.push(link.link);

    } else {

        // If there was no existing edge, we can
        // create one now.

        edges.push({
            source: link.source,
            target: link.target,
            links: [link.link]
        });
    }
});

// Start the creation of the graph by adding the edges.
// We add these first so they'll appear "underneath"
// the nodes.

var edgeSelection = svg.selectAll('.edge')
    .data(edges)
    .enter()
    .append('line')
    .classed('edge', true)
    .style('stroke', edgeStroke)
    .call(positionEdge, nodes);

// Next up are the nodes.

var nodeSelection = svg.selectAll('.node')
    .data(nodes)
    .enter()
    .append('g')
    .classed('node', true)
    .call(positionNode);

nodeSelection.append('circle')
    .attr('r', nodeRadius)
    .attr('data-node-index', function(d,i) { return i;})
    .style('fill', nodeFill)

// Now that we have our main selections (edges and
// nodes), we can create some subsets of those
// selections that will be helpful. Those subsets
// will be tied to individual nodes, so we'll
// start by iterating through them. We do that
// in two separate passes.

nodeSelection.each(function(node){

    // First let's identify all edges that are
    // incident to the node. We collect those as
    // a D3 selection so we can manipulate the
    // set easily with D3 utilities.

    node.incidentEdgeSelection = edgeSelection
        .filter(function(edge) {
            return nodes[edge.source] === node ||
                   nodes[edge.target] === node;
        });
});

// Now make a second pass through the nodes.

nodeSelection.each(function(node){

    // For this pass we want to find all adjacencies.
    // An adjacent node shares an edge with the
    // current node.

    node.adjacentNodeSelection = nodeSelection
        .filter(function(otherNode){

            // Presume that the nodes are not adjacent.
            var isAdjacent = false;

            // We can't be adjacent to ourselves.

            if (otherNode !== node) {

                // Look the incident edges of both nodes to
                // see if there are any in common.

                node.incidentEdgeSelection.each(function(edge){
                    otherNode.incidentEdgeSelection.each(function(otherEdge){
                        if (edge === otherEdge) {
                            isAdjacent = true;
                        }
                    });
                });

            }

            return isAdjacent;
        });

});

// Next we create a array for the node labels.
// We're going to use a "hidden" force layout to
// position the labels so they don't overlap
// each other. ("Hidden" because the links won't
// be visible.)

var labels = [];
var labelLinks = [];

nodes.forEach(function(node, idx){

    // For each node on the graph we create
    // two pseudo-nodes for its label. Once
    // pseudo-node will be anchored to the
    // center of the real node, while the
    // second will be linked to that node.

    // Add the pseudo-nodes to their array.

    labels.push({node: node});
    labels.push({node: node});

    // And create a link between them.

    labelLinks.push({
        source: idx * 2,
        target: idx * 2 + 1
    });
});

// Construct the selections for the label layout.

// There's no need to add any markup for the
// pseudo-links between the label nodes, but
// we do need a selection so we can run the
// force layout.

var labelLinkSelection = svg.selectAll('line.labelLink')
    .data(labelLinks);

// The label pseud-nodes themselves are just
// `<g>` containers.

var labelSelection = svg.selectAll('g.labelNode')
    .data(labels)
    .enter()
    .append('g')
        .classed('labelNode',true);

// Now add the text itself. Of the paired
// pseudo-nodes, only odd ones get the text
// elements.

labelSelection.append('text')
    .text(function(d, i) {
        return i % 2 == 0 ? '' : d.node.title;
    })
    .attr('data-node-index', function(d, i){
        return i % 2 == 0 ? 'none' : Math.floor(i/2);
    })
    .attr("xlink:href", "http://www.google.com")
    ;

// The last bit of markup are the lists of
// connections for each link.

var connectionSelection = graph.selectAll('ul.connection')
    .data(edges)
    .enter()
    .append('ul')
    .classed('connection hidden', true)
    .attr('data-edge-index', function(d,i) {return i;});

connectionSelection.each(function(connection){
    var selection = d3.select(this);
    connection.links.forEach(function(link){
        selection.append('li')
            .text(link);
    })
})

// Create the main force layout.

var force = d3.layout.force()
    .size([width, height])
    .nodes(nodes)
    .links(edges)
    .linkDistance(linkDistance)
    .charge(-500);

// Create the force layout for the labels.

var labelForce = d3.layout.force()
    .size([width, height])
    .nodes(labels)
    .links(labelLinks)
    .gravity(0)
    .linkDistance(0)
    .linkStrength(0.8)
    .charge(-100);

// Let trucks drag the nodes.

nodeSelection.call(force.drag);

// Function to handle clicks on node elements

var nodeClicked = function(node) {

    // Ignore events based on dragging.

    if (d3.event.defaultPrevented) return;

    // Remember whether or not the clicked
    // node is currently selected.

    var selected = node.selected;

    // Keep track of the desired text color.

    var fillColor;

    // In all cases we start by resetting
    // all the nodes and edges to their
    // de-selected state. We may override
    // this transition for some nodes and
    // edges later.

    nodeSelection
        .each(function(node) { node.selected = false; })
        .selectAll('circle')
            .transition()
            .attr('r', nodeRadius)
            .style('fill', nodeFill);

    edgeSelection
        .transition()
        .style('stroke', edgeStroke);

    labelSelection
        .transition()
        .style('opacity', 0);

    // Now see if the node wasn't previously selected.

    if (!selected) {

        // This node wasn't selected before, so
        // we want to select it now. That means
        // changing the styles of some of the
        // elements in the graph.

        // First we transition the incident edges.

        node.incidentEdgeSelection
            .transition()
            .style('stroke', node.color);

        // Now we transition the adjacent nodes.

        node.adjacentNodeSelection.selectAll('circle')
            .transition()
            .attr('r', nodeRadius)
            .style('fill', node.color);

        labelSelection
            .filter(function(label) {
                var adjacent = false;
                node.adjacentNodeSelection.each(function(d){
                    if (label.node === d) {
                        adjacent = true;
                    }
                })
                return adjacent;
            })
            .transition()
            .style('opacity', 1)
            .selectAll('text')
                .style('fill', adjLabelFill);

        // And finally, transition the node itself.

        d3.selectAll('circle[data-node-index="'+node.index+'"]')
            .transition()
            .attr('r', selectedNodeRadius)
            .style('fill', node.color);

        // Make sure the node's label is visible

        labelSelection
            .filter(function(label) {return label.node === node;})
            .transition()
            .attr("xlink:href", "http://www.google.com")
            .style('opacity', 1);

        // And note the desired color for bundling with
        // the transition of the label position.

        fillColor = node.text;

        // Delete the current notes section to prepare
        // for new information.

        notes.selectAll('*').remove();

        // Fill in the notes section with informationm
        // from the node. Because we want to transition
        // this to match the transitions on the graph,
        // we first set it's opacity to 0.

        notes.style({'opacity': 0});

        // Now add the notes content.

        notes.append('h1').text(node.name);
        notes.append('h2').text(node.subtitle);
        if (node.url && node.image) {
            notes.append('div')
                .classed('artwork',true)
                .append('a')
                .attr('href', node.url)
                .append('img')
                    .attr('src', node.image);
        }
        var list = notes.append('ul');
        node.links.forEach(function(link){
            list.append('li')
                .text(link);
        })

        // With the content in place, transition
        // the opacity to make it visible.

        notes.transition().style({'opacity': 1});

    } else {

        // Since we're de-selecting the current
        // node, transition the notes section
        // and then remove it.

        notes.transition()
            .style({'opacity': 0})
            .each('end', function(){
                notes.selectAll('*').remove();
            });

        // Transition all the labels to their
        // default styles.

        labelSelection
            .transition()
            .style('opacity', 1)
            .selectAll('text')
                .style('fill', labelFill);

        // The fill color for the current node's
        // label must also be bundled with its
        // position transition.

        fillColor = labelFill;
    }

    // Toggle the selection state for the node.

    node.selected = !selected;

    // Update the position of the label text.

    var text = d3.select('text[data-node-index="'+node.index+'"]').node();
    var label = null;
    labelSelection.each(function(d){
        if (d.node === node) { label = d; }
    })

    if (text && label) {
        positionLabelText(text, label, fillColor);
    }

};

// Function to handle click on edges.

var edgeClicked = function(edge, idx) {

    // Remember the current selection state of the edge.

    var selected = edge.selected;

    // Transition all connections to hidden. If the
    // current edge needs to be displayed, it's transition
    // will be overridden shortly.

    connectionSelection
        .each(function(edge) { edge.selected = false; })
        .transition()
        .style('opacity', 0)
        .each('end', function(){
            d3.select(this).classed('hidden', true);
        });

    // If the current edge wasn't selected before, we
    // want to transition it to the selected state now.

    if (!selected) {
        d3.select('ul.connection[data-edge-index="'+idx+'"]')
            .classed('hidden', false)
            .style('opacity', 0)
            .transition()
            .style('opacity', 1);
    }

    // Toggle the resulting selection state for the edge.

    edge.selected = !selected;

};

// Handle clicks on the nodes.

nodeSelection.on('click', nodeClicked);

labelSelection.on('click', function(pseudonode) {
    nodeClicked(pseudonode.node);
});

// Handle clicks on the edges.

edgeSelection.on('click', edgeClicked);
connectionSelection.on('click', edgeClicked);

// Animate the force layout.

force.on('tick', function() {

    // Constrain all the nodes to remain in the
    // graph container.

    nodeSelection.each(function(node) {
        node.x = Math.max(node.x, 2*selectedNodeRadius);
        node.y = Math.max(node.y, 2*selectedNodeRadius);
        node.x = Math.min(node.x, width-2*selectedNodeRadius);
        node.y = Math.min(node.y, height-2*selectedNodeRadius);
    });

    // Kick the label layout to make sure it doesn't
    // finish while the main layout is still running.

    labelForce.start();

    // Calculate the positions of the label nodes.

    labelSelection.each(function(label, idx) {

        // Label pseudo-nodes come in pairs. We
        // treat odd and even nodes differently.

        if(idx % 2) {

            // Odd pseudo-nodes have the actual text.
            // That text needs a real position. The
            // pseudo-node itself we leave to the
            // force layout to position.

            positionLabelText(this.childNodes[0], label);

        } else {

            // Even pseudo-nodes (which have no text)
            // are fixed to the center of the
            // corresponding real node. This will
            // override the position calculated by
            // the force layout.

            label.x = label.node.x;
            label.y = label.node.y;

        }
    });

    // Calculate the position for the connection lists.

    connectionSelection.each(function(connection){
        var x = (connection.source.x + connection.target.x)/2 - 27;
        var y = (connection.source.y + connection.target.y)/2;
        d3.select(this)
            .style({
                'top':  y + 'px',
                'left': x + 'px'
            });
    });

    // Update the posistions of the nodes and edges.

    nodeSelection.call(positionNode);
    labelSelection.call(positionNode);
    edgeSelection.call(positionEdge);
    labelLinkSelection.call(positionEdge);

});

// Start the layout computations.
force.start();
labelForce.start();


    </script>
</body>
</html>