<h1>D3 tutorial by mbostock</h1>
<h3>svg input tab</h3>



<%#= render 'housesvg' %>

<!-- Slider HTML -->
<!-- <div id="vertical-slider" style="height: 200px;"></div> -->

<!-- Label input HTML -->
<div id="slider"></div>

<p>
  <label for="nValue" 
         style="display: inline-block; width: 240px; text-align: right">
         Angle/FlopHouse = <span id="nValue-value"></span>
  </label>
  <input type="number" min="-720" max="720" step="5" value="0" id="nValue" >
</p>
<p>
  <label for="nColor" 
         style="display: inline-block; width: 240px; text-align: right">
         Color/Profit Margin = <span id="nColor-value"></span>
  </label>
  <input type="number" min="-1000000" max="1000000" step="1000" value="0" id="nColor" >
</p>
<p>
  <label for="nRatio" 
         style="display: inline-block; width: 240px; text-align: right">
         Ratio/Profit % = <span id="nRatio-value"></span>
  </label>
  <input type="number" min="-10" max="10" step=".10" value="0" id="nRatio" >
</p>
<p> words before the script</p>


</svg>

<script>

var width = 600;
var height = 300;
var centerX = 75;
var centerY = 75;

var holder = d3.select("body")
      .append("svg")
      .attr("width", width)    
      .attr("height", height); 


// draw the element
holder.append("rect")
  .style("fill", "grey")
  .style("stroke", "black")
  .style("stroke-width", "2px")
  .attr("x1", 0)
  .attr("y1", 0)
  .attr("width", "175")
  .attr("height","175")
  .attr("rect-anchor", "middle")
  .attr("transform", "translate(225,75) rotate(0)")
  ;

  holder.append("polyline")
  .style("fill", "green")
  .style("stroke", "black")
  .style("stroke-width", "2px")
  .attr("points", "175,175, 200,200, 200,225, 150,225, 150,200, 175,175")
  .attr("transform", "scale(1)")
  ;


// when the input range changes update value 

//rotate/angle update
d3.select("#nValue").on("input", function() {
  update1(+this.value);
});

//ratio/scale update
d3.select("#nRatio").on("input", function() {
  update2(+this.value);
});

//ratio/scale update
d3.select("#nColor").on("input", function() {
  colorShift(+this.value);
});

// //ratio/scale update
// d3.select("#nColor").on("input", function() {
//   polylineScale(+this.value);
// });


// Initial update value 
update1(0);
update2(0);
colorShift(0);
// polylineScale(0);


// rotates appended svg
function update1(nValue) {
  // adjust the value
  holder.select("rect") 
    .attr("transform", "translate(150,100) rotate("+nValue+", 75,75)");

}

// scales appended svg
function update2(nRatio) {

  // adjust the ratio
  holder.select("rect") 
    .attr("width", "100" * (1 + nRatio))
    .attr("height","100" * (1 + nRatio))

  }
//  changes color of appended svg
function colorShift(nColor) {
  
    var scale = d3.scale.linear()
                      .domain([-100000, 0, 125500, 255000, 1000000])
                      .range(["red", "white", "lime", "green", "black"]);
    holder.select("rect")
      .style("fill", function() { return scale(nColor) })
      
  // else if (255000 < nColor){
  //   var scale = d3.scale.linear()
  //                     .domain([255000,1000000])
  //                     .range(["green", "black"]);
  //   holder.select("rect")
  //     .style("fill", function() { return scale(nColor) })
  // }
}

// function(d) { return d3.hsl(d % x / x * 360, 1, Math.floor(d / x) / y); }
//scales non-linear svg
// function polylineScale (nColor) {
//   holder.select("polyline")   
//     .attr("transform", "translate(-50*("+nColor+"-1), -50*("+nColor+"-1)) scale("+nColor+")")
//   } 



</script>

  <p> words after the script</p>
